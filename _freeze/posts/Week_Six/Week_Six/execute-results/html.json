{
  "hash": "2f0d8bf5a6ba11c30e33e7e564ae214c",
  "result": {
    "markdown": "---\ntitle: \"Week Six\"\nauthor: \"Harun Celik\"\ndate: \"06-23-2023\"\ncategories: [\"Week Six\", \"Phase Three\"]\nimage: \"images/ShinyDraft.PNG\"\ndraft: true\n---\n\n\nThe following is a screenshot of the RShiny application and its following is the code used to produce the first that demo.\n\n![RShiny Application Draft](images/ShinyDraft.PNG)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(shiny)\nlibrary(leaflet)\nlibrary(dplyr)\nlibrary(googleway)\n\n# Define UI for application that draws a histogram\nui <- fluidPage(\n\n    # Application title\n    titlePanel(\"Rural Grocery Stores\"),\n\n    # Sidebar with a slider input for number of bins \n    sidebarLayout(\n        sidebarPanel(\n          textInput(inputId = \"place_names\", \n                    label = \"Type Store\", \n                    value = \"dollar\"),\n          sliderInput(inputId = \"radius_slider\", \n                      label = \"Search Radius (in meters)\", \n                      min = 100, \n                      max = 10000, \n                      value = 5000, \n                      step = 100),\n          p(),\n          actionButton(inputId = \"recalc\", \"Calculate Points\")\n        ),\n\n        # Show a plot of the generated distribution\n        mainPanel(\n           leafletOutput(outputId = \"leaflet_map\")\n        )\n    )\n)\n\n# Define server logic required to draw a histogram\nserver <- function(input, output) {\n    \n    spatial_results <- NULL\n  \n    output$leaflet_map <- renderLeaflet({\n      leaflet(spatial_results) %>%\n        addProviderTiles(providers$OpenStreetMap) %>%\n        setView(lat = 42.034534, lng =-93.620369, zoom = 10)\n        #addMarkers(lng = spatial_results$lng, lat = spatial_results$lat)\n    })\n    \n    observeEvent(input$leaflet_map_click, {\n      locations <- input$leaflet_map_click\n    })\n    \n    observeEvent(input$recalc, {\n      api_results <- NULL\n      api_results <- google_places(search_string = input$place_names, \n                                       location = c(42.034534, -93.620369), \n                                       radius = input$radius_slider, \n                                       keyword = \"store\", \n                                   key = Sys.getenv(\"PLACES_KEY\"))\n      \n      spatial_results <- api_results$results %>% \n        transmute(name = name, \n                  lat = geometry$location$lat, \n                  lng = geometry$location$lng)\n        \n    \n    \n    \n    leafletProxy(\"leaflet_map\") %>%\n      clearMarkers() %>%\n      addMarkers(lng = spatial_results$lng, \n                 lat = spatial_results$lat,\n                 popup = spatial_results$name)\n    })\n}\n\n# Run the application \nshinyApp(ui = ui, server = server)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}