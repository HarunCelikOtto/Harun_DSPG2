{
  "hash": "f1319a17fc6808019f55804be75def6c",
  "result": {
    "markdown": "---\ntitle: \"DSPG Groceries Technical Overview\"\nauthor: \"Harun Celik\"\ndate: \"06-23-2023\"\ncategories: [\"Mid-DSPG Update\", \"Phase Three\"]\nimage: \"images/ShinyDraft.PNG\"\ndraft: true\nformat: revealjs\ntransition: fade\n---\n\n\n## Design Choices\n\nThe design choice for using `R` had to do with the software's open source accessibility as well as the possibility of future integration with different software. \n\n::: incremental\n- Automation of data.\n- Interact dynamically with user input.\n- Environmental support for packages.\n- Integration with R Shiny applications.\n\n\nA look at how the calculations work...\n:::\n\n## Loading The Package\n\n<small> One of the first choices we made was to develop the functions in an R Package environment.\nThis means that once the package is complete, it can be compiled and shared with others through\nonline repositories.</small>\n\nLoading the package\n\n``` r\n# Import the DSPGGrocery Package\nlibrary(DSPGGrocery)\n```\n\nLoading the Google API\n<small> Since the package depends on the Google API, it will also need to be loaded in.</small>\n\n``` r\n# Set API Key\ngoogleway::set_key(key = Sys.getenv(\"PLACES_KEY\"))\n```\n\n## Estimating Market Size\n\n``` r{code-line-numbers=\"|2|9|10-16\"}\n# Finds distance to points, assigns them to variables\nnorth_dist <- google_distance(\"42.3053733, -95.0621664\",\"42.373296,-95.1508718\")\neast_dist <- google_distance(\"42.3053733, -95.0621664\", \"42.2669247,-95.0038576\")\nsouth_dist <- google_distance(\"42.3053733, -95.0621664\",\"42.258085,-95.223378\")\nwest_dist <- google_distance(\"42.3053733, -95.0621664\",\"42.3113755,-95.6832781\")\n\n# Makes sample list of cities around Lakeview, calls functions, \n# and assigns them to variables\ncity_list = list(1117,994, 222, 19, 86, 265)\nrural_pop <- Rural_Population(9814, \n                              City_Populations(city_list),\n                              Pct_County(north_val,\n                                         east_val,\n                                         south_val,\n                                         west_val, \n                                         1500*.62137119))\ntown_pop <- City_Populations(city_list)\n```\n\n## Estimating Revenue\n\n``` r\n# The function takes the values generated from \n# previous calculations and calculates Total Estimated Revenue\nTotal_Estimate_Revenue(county_pop=9752,\n                      towns_pop=City_Populations(city_list),\n                      pct_county=Pct_County(north_val,\n                                            east_val,\n                                            south_val,\n                                            west_val, \n                                            1500*.62137119),\n                      town_list=list(1117,994,222, 19, 86, 265),\n                      metro_list=list(1117),\n                      state_index=89.568)\n\n```\n\n## Aaron - Estimating Expenses\n\n\n::: {.cell}\n\n:::\n\n\n## R Shiny\n\nR Shiny has the opportunity for us to be able to integrate the different components of the project together. While we test out different design ideas, we thought that following the approach of our client's is what the default should be. In this sense, the first portion of the application takes information about the store's potential location and\n\nSrika's data exploration had us thinking about how we would want to display the interactive plots generated by `plotly` and we hope to display them in a dashboard style template similar to what's displayed below.\n\n![Flexdashboard Demo](images/flexboarddemo.PNG)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    // dispatch for htmlwidgets\r\n    function fireSlideEnter() {\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n    }\r\n\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n      fireSlideEnter();\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}